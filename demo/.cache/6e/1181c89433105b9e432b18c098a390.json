{"id":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","dependencies":[{"name":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\package.json","includedInParent":true,"mtime":1631872669254},{"name":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\.babelrc","includedInParent":true,"mtime":1631157722000},{"name":"./blur","loc":{"line":20,"column":21},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\output_rendering_util.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\blur.js"},{"name":"./util","loc":{"line":21,"column":21},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\output_rendering_util.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\util.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexports.__esModule = true;\r\nexports.blurBodyPart = exports.drawBokehEffect = exports.drawPixelatedMask = exports.drawMask = exports.toColoredPartMask = exports.toMask = void 0;\r\nvar blur_1 = require(\"./blur\");\r\nvar util_1 = require(\"./util\");\r\nvar offScreenCanvases = {};\r\nfunction isSafari() {\r\n    return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\r\n}\r\nfunction assertSameDimensions(_a, _b, nameA, nameB) {\r\n    var widthA = _a.width, heightA = _a.height;\r\n    var widthB = _b.width, heightB = _b.height;\r\n    if (widthA !== widthB || heightA !== heightB) {\r\n        throw new Error(\"error: dimensions must match. \" + nameA + \" has dimensions \" + widthA + \"x\" + heightA + \", \" + nameB + \" has dimensions \" + widthB + \"x\" + heightB);\r\n    }\r\n}\r\nfunction flipCanvasHorizontal(canvas) {\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.scale(-1, 1);\r\n    ctx.translate(-canvas.width, 0);\r\n}\r\nfunction drawWithCompositing(ctx, image, compositeOperation) {\r\n    ctx.globalCompositeOperation = compositeOperation;\r\n    ctx.drawImage(image, 0, 0);\r\n}\r\nfunction createOffScreenCanvas() {\r\n    if (typeof document !== 'undefined') {\r\n        return document.createElement('canvas');\r\n    }\r\n    else if (typeof OffscreenCanvas !== 'undefined') {\r\n        return new OffscreenCanvas(0, 0);\r\n    }\r\n    else {\r\n        throw new Error('Cannot create a canvas in this context');\r\n    }\r\n}\r\nfunction ensureOffscreenCanvasCreated(id) {\r\n    if (!offScreenCanvases[id]) {\r\n        offScreenCanvases[id] = createOffScreenCanvas();\r\n    }\r\n    return offScreenCanvases[id];\r\n}\r\nfunction drawAndBlurImageOnCanvas(image, blurAmount, canvas) {\r\n    var height = image.height, width = image.width;\r\n    var ctx = canvas.getContext('2d');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.save();\r\n    if (isSafari()) {\r\n        blur_1.cpuBlur(canvas, image, blurAmount);\r\n    }\r\n    else {\r\n        // tslint:disable:no-any\r\n        ctx.filter = \"blur(\" + blurAmount + \"px)\";\r\n        ctx.drawImage(image, 0, 0, width, height);\r\n    }\r\n    ctx.restore();\r\n}\r\nfunction drawAndBlurImageOnOffScreenCanvas(image, blurAmount, offscreenCanvasName) {\r\n    var canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\r\n    if (blurAmount === 0) {\r\n        renderImageToCanvas(image, canvas);\r\n    }\r\n    else {\r\n        drawAndBlurImageOnCanvas(image, blurAmount, canvas);\r\n    }\r\n    return canvas;\r\n}\r\nfunction renderImageToCanvas(image, canvas) {\r\n    var width = image.width, height = image.height;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n}\r\n/**\r\n * Draw an image on a canvas\r\n */\r\nfunction renderImageDataToCanvas(image, canvas) {\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.putImageData(image, 0, 0);\r\n}\r\nfunction renderImageDataToOffScreenCanvas(image, canvasName) {\r\n    var canvas = ensureOffscreenCanvasCreated(canvasName);\r\n    renderImageDataToCanvas(image, canvas);\r\n    return canvas;\r\n}\r\n/**\r\n * Given the output from estimating multi-person segmentation, generates an\r\n * image with foreground and background color at each pixel determined by the\r\n * corresponding binary segmentation value at the pixel from the output.  In\r\n * other words, pixels where there is a person will be colored with foreground\r\n * color and where there is not a person will be colored with background color.\r\n *\r\n * @param personOrPartSegmentation The output from\r\n * `segmentPerson`, `segmentMultiPerson`,\r\n * `segmentPersonParts` or `segmentMultiPersonParts`. They can\r\n * be SemanticPersonSegmentation object, an array of PersonSegmentation object,\r\n * SemanticPartSegmentation object, or an array of PartSegmentation object.\r\n *\r\n * @param foreground Default to {r:0, g:0, b:0, a: 0}. The foreground color\r\n * (r,g,b,a) for visualizing pixels that belong to people.\r\n *\r\n * @param background Default to {r:0, g:0, b:0, a: 255}. The background color\r\n * (r,g,b,a) for visualizing pixels that don't belong to people.\r\n *\r\n * @param drawContour Default to false. Whether to draw the contour around each\r\n * person's segmentation mask or body part mask.\r\n *\r\n * @param foregroundIds Default to [1]. The integer values that represent\r\n * foreground. For person segmentation, 1 is the foreground. For body part\r\n * segmentation, it can be a subset of all body parts ids.\r\n *\r\n * @returns An ImageData with the same width and height of\r\n * all the PersonSegmentation in multiPersonSegmentation, with opacity and\r\n * transparency at each pixel determined by the corresponding binary\r\n * segmentation value at the pixel from the output.\r\n */\r\nfunction toMask(personOrPartSegmentation, foreground, background, drawContour, foregroundIds) {\r\n    if (foreground === void 0) { foreground = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        a: 0\r\n    }; }\r\n    if (background === void 0) { background = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        a: 255\r\n    }; }\r\n    if (drawContour === void 0) { drawContour = false; }\r\n    if (foregroundIds === void 0) { foregroundIds = [1]; }\r\n    if (Array.isArray(personOrPartSegmentation) &&\r\n        personOrPartSegmentation.length === 0) {\r\n        return null;\r\n    }\r\n    var multiPersonOrPartSegmentation;\r\n    if (!Array.isArray(personOrPartSegmentation)) {\r\n        multiPersonOrPartSegmentation = [personOrPartSegmentation];\r\n    }\r\n    else {\r\n        multiPersonOrPartSegmentation = personOrPartSegmentation;\r\n    }\r\n    var _a = multiPersonOrPartSegmentation[0], width = _a.width, height = _a.height;\r\n    var bytes = new Uint8ClampedArray(width * height * 4);\r\n    function drawStroke(bytes, row, column, width, radius, color) {\r\n        if (color === void 0) { color = { r: 0, g: 255, b: 255, a: 255 }; }\r\n        for (var i = -radius; i <= radius; i++) {\r\n            for (var j = -radius; j <= radius; j++) {\r\n                if (i !== 0 && j !== 0) {\r\n                    var n = (row + i) * width + (column + j);\r\n                    bytes[4 * n + 0] = color.r;\r\n                    bytes[4 * n + 1] = color.g;\r\n                    bytes[4 * n + 2] = color.b;\r\n                    bytes[4 * n + 3] = color.a;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function isSegmentationBoundary(segmentationData, row, column, width, foregroundIds, radius) {\r\n        if (foregroundIds === void 0) { foregroundIds = [1]; }\r\n        if (radius === void 0) { radius = 1; }\r\n        var numberBackgroundPixels = 0;\r\n        for (var i = -radius; i <= radius; i++) {\r\n            var _loop_2 = function (j) {\r\n                if (i !== 0 && j !== 0) {\r\n                    var n_1 = (row + i) * width + (column + j);\r\n                    if (!foregroundIds.some(function (id) { return id === segmentationData[n_1]; })) {\r\n                        numberBackgroundPixels += 1;\r\n                    }\r\n                }\r\n            };\r\n            for (var j = -radius; j <= radius; j++) {\r\n                _loop_2(j);\r\n            }\r\n        }\r\n        return numberBackgroundPixels > 0;\r\n    }\r\n    for (var i = 0; i < height; i += 1) {\r\n        var _loop_1 = function (j) {\r\n            var n = i * width + j;\r\n            bytes[4 * n + 0] = background.r;\r\n            bytes[4 * n + 1] = background.g;\r\n            bytes[4 * n + 2] = background.b;\r\n            bytes[4 * n + 3] = background.a;\r\n            var _loop_3 = function (k) {\r\n                if (foregroundIds.some(function (id) { return id === multiPersonOrPartSegmentation[k].data[n]; })) {\r\n                    bytes[4 * n] = foreground.r;\r\n                    bytes[4 * n + 1] = foreground.g;\r\n                    bytes[4 * n + 2] = foreground.b;\r\n                    bytes[4 * n + 3] = foreground.a;\r\n                    var isBoundary = isSegmentationBoundary(multiPersonOrPartSegmentation[k].data, i, j, width, foregroundIds);\r\n                    if (drawContour && i - 1 >= 0 && i + 1 < height && j - 1 >= 0 &&\r\n                        j + 1 < width && isBoundary) {\r\n                        drawStroke(bytes, i, j, width, 1);\r\n                    }\r\n                }\r\n            };\r\n            for (var k = 0; k < multiPersonOrPartSegmentation.length; k++) {\r\n                _loop_3(k);\r\n            }\r\n        };\r\n        for (var j = 0; j < width; j += 1) {\r\n            _loop_1(j);\r\n        }\r\n    }\r\n    return new ImageData(bytes, width, height);\r\n}\r\nexports.toMask = toMask;\r\nvar RAINBOW_PART_COLORS = [\r\n    [110, 64, 170], [143, 61, 178], [178, 60, 178], [210, 62, 167],\r\n    [238, 67, 149], [255, 78, 125], [255, 94, 99], [255, 115, 75],\r\n    [255, 140, 56], [239, 167, 47], [217, 194, 49], [194, 219, 64],\r\n    [175, 240, 91], [135, 245, 87], [96, 247, 96], [64, 243, 115],\r\n    [40, 234, 141], [28, 219, 169], [26, 199, 194], [33, 176, 213],\r\n    [47, 150, 224], [65, 125, 224], [84, 101, 214], [99, 81, 195]\r\n];\r\n/**\r\n * Given the output from person body part segmentation (or multi-person\r\n * instance body part segmentation) and an array of colors indexed by part id,\r\n * generates an image with the corresponding color for each part at each pixel,\r\n * and white pixels where there is no part.\r\n *\r\n * @param partSegmentation The output from segmentPersonParts\r\n * or segmentMultiPersonParts. The former is a SemanticPartSegmentation\r\n * object and later is an array of PartSegmentation object.\r\n *\r\n * @param partColors A multi-dimensional array of rgb colors indexed by\r\n * part id.  Must have 24 colors, one for every part.\r\n *\r\n * @returns An ImageData with the same width and height of all the element in\r\n * multiPersonPartSegmentation, with the corresponding color for each part at\r\n * each pixel, and black pixels where there is no part.\r\n */\r\nfunction toColoredPartMask(partSegmentation, partColors) {\r\n    if (partColors === void 0) { partColors = RAINBOW_PART_COLORS; }\r\n    if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\r\n        return null;\r\n    }\r\n    var multiPersonPartSegmentation;\r\n    if (!Array.isArray(partSegmentation)) {\r\n        multiPersonPartSegmentation = [partSegmentation];\r\n    }\r\n    else {\r\n        multiPersonPartSegmentation = partSegmentation;\r\n    }\r\n    var _a = multiPersonPartSegmentation[0], width = _a.width, height = _a.height;\r\n    var bytes = new Uint8ClampedArray(width * height * 4);\r\n    for (var i = 0; i < height * width; ++i) {\r\n        // invert mask.  Invert the segmentation mask.\r\n        var j = i * 4;\r\n        bytes[j + 0] = 255;\r\n        bytes[j + 1] = 255;\r\n        bytes[j + 2] = 255;\r\n        bytes[j + 3] = 255;\r\n        for (var k = 0; k < multiPersonPartSegmentation.length; k++) {\r\n            var partId = multiPersonPartSegmentation[k].data[i];\r\n            if (partId !== -1) {\r\n                var color = partColors[partId];\r\n                if (!color) {\r\n                    throw new Error(\"No color could be found for part id \" + partId);\r\n                }\r\n                bytes[j + 0] = color[0];\r\n                bytes[j + 1] = color[1];\r\n                bytes[j + 2] = color[2];\r\n                bytes[j + 3] = 255;\r\n            }\r\n        }\r\n    }\r\n    return new ImageData(bytes, width, height);\r\n}\r\nexports.toColoredPartMask = toColoredPartMask;\r\nvar CANVAS_NAMES = {\r\n    blurred: 'blurred',\r\n    blurredMask: 'blurred-mask',\r\n    mask: 'mask',\r\n    lowresPartMask: 'lowres-part-mask'\r\n};\r\n/**\r\n * Given an image and a maskImage of type ImageData, draws the image with the\r\n * mask on top of it onto a canvas.\r\n *\r\n * @param canvas The canvas to be drawn onto.\r\n *\r\n * @param image The original image to apply the mask to.\r\n *\r\n * @param maskImage An ImageData containing the mask.  Ideally this should be\r\n * generated by toMask or toColoredPartMask.\r\n *\r\n * @param maskOpacity The opacity of the mask when drawing it on top of the\r\n * image. Defaults to 0.7. Should be a float between 0 and 1.\r\n *\r\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\r\n * Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nfunction drawMask(canvas, image, maskImage, maskOpacity, maskBlurAmount, flipHorizontal) {\r\n    if (maskOpacity === void 0) { maskOpacity = 0.7; }\r\n    if (maskBlurAmount === void 0) { maskBlurAmount = 0; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    ctx.drawImage(image, 0, 0);\r\n    ctx.globalAlpha = maskOpacity;\r\n    if (maskImage) {\r\n        assertSameDimensions({ width: width, height: height }, maskImage, 'image', 'mask');\r\n        var mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\r\n        var blurredMask = drawAndBlurImageOnOffScreenCanvas(mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\r\n        ctx.drawImage(blurredMask, 0, 0, width, height);\r\n    }\r\n    ctx.restore();\r\n}\r\nexports.drawMask = drawMask;\r\n/**\r\n * Given an image and a maskImage of type ImageData, draws the image with the\r\n * pixelated mask on top of it onto a canvas.\r\n *\r\n * @param canvas The canvas to be drawn onto.\r\n *\r\n * @param image The original image to apply the mask to.\r\n *\r\n * @param maskImage An ImageData containing the mask.  Ideally this should be\r\n * generated by toColoredPartMask.\r\n *\r\n * @param maskOpacity The opacity of the mask when drawing it on top of the\r\n * image. Defaults to 0.7. Should be a float between 0 and 1.\r\n *\r\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\r\n * Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\r\n * to false.\r\n *\r\n * @param pixelCellWidth The width of each pixel cell. Default to 10 px.\r\n */\r\nfunction drawPixelatedMask(canvas, image, maskImage, maskOpacity, maskBlurAmount, flipHorizontal, pixelCellWidth) {\r\n    if (maskOpacity === void 0) { maskOpacity = 0.7; }\r\n    if (maskBlurAmount === void 0) { maskBlurAmount = 0; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    if (pixelCellWidth === void 0) { pixelCellWidth = 10.0; }\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    assertSameDimensions({ width: width, height: height }, maskImage, 'image', 'mask');\r\n    var mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\r\n    var blurredMask = drawAndBlurImageOnOffScreenCanvas(mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\r\n    canvas.width = blurredMask.width;\r\n    canvas.height = blurredMask.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    var offscreenCanvas = ensureOffscreenCanvasCreated(CANVAS_NAMES.lowresPartMask);\r\n    var offscreenCanvasCtx = offscreenCanvas.getContext('2d');\r\n    offscreenCanvas.width = blurredMask.width * (1.0 / pixelCellWidth);\r\n    offscreenCanvas.height = blurredMask.height * (1.0 / pixelCellWidth);\r\n    offscreenCanvasCtx.drawImage(blurredMask, 0, 0, blurredMask.width, blurredMask.height, 0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctx.drawImage(offscreenCanvas, 0, 0, offscreenCanvas.width, offscreenCanvas.height, 0, 0, canvas.width, canvas.height);\r\n    // Draws vertical grid lines that are `pixelCellWidth` apart from each other.\r\n    for (var i = 0; i < offscreenCanvas.width; i++) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#ffffff';\r\n        ctx.moveTo(pixelCellWidth * i, 0);\r\n        ctx.lineTo(pixelCellWidth * i, canvas.height);\r\n        ctx.stroke();\r\n    }\r\n    // Draws horizontal grid lines that are `pixelCellWidth` apart from each\r\n    // other.\r\n    for (var i = 0; i < offscreenCanvas.height; i++) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#ffffff';\r\n        ctx.moveTo(0, pixelCellWidth * i);\r\n        ctx.lineTo(canvas.width, pixelCellWidth * i);\r\n        ctx.stroke();\r\n    }\r\n    ctx.globalAlpha = 1.0 - maskOpacity;\r\n    ctx.drawImage(image, 0, 0, blurredMask.width, blurredMask.height);\r\n    ctx.restore();\r\n}\r\nexports.drawPixelatedMask = drawPixelatedMask;\r\nfunction createPersonMask(multiPersonSegmentation, edgeBlurAmount) {\r\n    var backgroundMaskImage = toMask(multiPersonSegmentation, { r: 0, g: 0, b: 0, a: 255 }, { r: 0, g: 0, b: 0, a: 0 });\r\n    var backgroundMask = renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\r\n    if (edgeBlurAmount === 0) {\r\n        return backgroundMask;\r\n    }\r\n    else {\r\n        return drawAndBlurImageOnOffScreenCanvas(backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\r\n    }\r\n}\r\n/**\r\n * Given a personSegmentation and an image, draws the image with its background\r\n * blurred onto the canvas.\r\n *\r\n * @param canvas The canvas to draw the background-blurred image onto.\r\n *\r\n * @param image The image to blur the background of and draw.\r\n *\r\n * @param personSegmentation A SemanticPersonSegmentation or an array of\r\n * PersonSegmentation object.\r\n *\r\n * @param backgroundBlurAmount How many pixels in the background blend into each\r\n * other.  Defaults to 3. Should be an integer between 1 and 20.\r\n *\r\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\r\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nfunction drawBokehEffect(canvas, image, multiPersonSegmentation, backgroundBlurAmount, edgeBlurAmount, flipHorizontal) {\r\n    if (backgroundBlurAmount === void 0) { backgroundBlurAmount = 3; }\r\n    if (edgeBlurAmount === void 0) { edgeBlurAmount = 3; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    var blurredImage = drawAndBlurImageOnOffScreenCanvas(image, backgroundBlurAmount, CANVAS_NAMES.blurred);\r\n    canvas.width = blurredImage.width;\r\n    canvas.height = blurredImage.height;\r\n    var ctx = canvas.getContext('2d');\r\n    if (Array.isArray(multiPersonSegmentation) &&\r\n        multiPersonSegmentation.length === 0) {\r\n        ctx.drawImage(blurredImage, 0, 0);\r\n        return;\r\n    }\r\n    var personMask = createPersonMask(multiPersonSegmentation, edgeBlurAmount);\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    // draw the original image on the final canvas\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    // \"destination-in\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // crop what's not the person using the mask from the original image\r\n    drawWithCompositing(ctx, personMask, 'destination-in');\r\n    // \"destination-over\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // draw the blurred background on top of the original image where it doesn't\r\n    // overlap.\r\n    drawWithCompositing(ctx, blurredImage, 'destination-over');\r\n    ctx.restore();\r\n}\r\nexports.drawBokehEffect = drawBokehEffect;\r\nfunction createBodyPartMask(multiPersonPartSegmentation, bodyPartIdsToMask, edgeBlurAmount) {\r\n    var backgroundMaskImage = toMask(multiPersonPartSegmentation, { r: 0, g: 0, b: 0, a: 0 }, { r: 0, g: 0, b: 0, a: 255 }, true, bodyPartIdsToMask);\r\n    var backgroundMask = renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\r\n    if (edgeBlurAmount === 0) {\r\n        return backgroundMask;\r\n    }\r\n    else {\r\n        return drawAndBlurImageOnOffScreenCanvas(backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\r\n    }\r\n}\r\n/**\r\n * Given a personSegmentation and an image, draws the image with its background\r\n * blurred onto the canvas.\r\n *\r\n * @param canvas The canvas to draw the background-blurred image onto.\r\n *\r\n * @param image The image to blur the background of and draw.\r\n *\r\n * @param partSegmentation A SemanticPartSegmentation or an array of\r\n * PartSegmentation object.\r\n *\r\n * @param bodyPartIdsToBlur Default to [0, 1] (left-face and right-face). An\r\n * array of body part ids to blur. Each must be one of the 24 body part ids.\r\n *\r\n * @param backgroundBlurAmount How many pixels in the background blend into each\r\n * other.  Defaults to 3. Should be an integer between 1 and 20.\r\n *\r\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\r\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nfunction blurBodyPart(canvas, image, partSegmentation, bodyPartIdsToBlur, backgroundBlurAmount, edgeBlurAmount, flipHorizontal) {\r\n    if (bodyPartIdsToBlur === void 0) { bodyPartIdsToBlur = [0, 1]; }\r\n    if (backgroundBlurAmount === void 0) { backgroundBlurAmount = 3; }\r\n    if (edgeBlurAmount === void 0) { edgeBlurAmount = 3; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    var blurredImage = drawAndBlurImageOnOffScreenCanvas(image, backgroundBlurAmount, CANVAS_NAMES.blurred);\r\n    canvas.width = blurredImage.width;\r\n    canvas.height = blurredImage.height;\r\n    var ctx = canvas.getContext('2d');\r\n    if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\r\n        ctx.drawImage(blurredImage, 0, 0);\r\n        return;\r\n    }\r\n    var bodyPartMask = createBodyPartMask(partSegmentation, bodyPartIdsToBlur, edgeBlurAmount);\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    // draw the original image on the final canvas\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    // \"destination-in\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // crop what's not the person using the mask from the original image\r\n    drawWithCompositing(ctx, bodyPartMask, 'destination-in');\r\n    // \"destination-over\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // draw the blurred background on top of the original image where it doesn't\r\n    // overlap.\r\n    drawWithCompositing(ctx, blurredImage, 'destination-over');\r\n    ctx.restore();\r\n}\r\nexports.blurBodyPart = blurBodyPart;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/output_rendering_util.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}}],"sources":{"node_modules/@tensorflow-models/body-pix/output_rendering_util.js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexports.__esModule = true;\r\nexports.blurBodyPart = exports.drawBokehEffect = exports.drawPixelatedMask = exports.drawMask = exports.toColoredPartMask = exports.toMask = void 0;\r\nvar blur_1 = require(\"./blur\");\r\nvar util_1 = require(\"./util\");\r\nvar offScreenCanvases = {};\r\nfunction isSafari() {\r\n    return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\r\n}\r\nfunction assertSameDimensions(_a, _b, nameA, nameB) {\r\n    var widthA = _a.width, heightA = _a.height;\r\n    var widthB = _b.width, heightB = _b.height;\r\n    if (widthA !== widthB || heightA !== heightB) {\r\n        throw new Error(\"error: dimensions must match. \" + nameA + \" has dimensions \" + widthA + \"x\" + heightA + \", \" + nameB + \" has dimensions \" + widthB + \"x\" + heightB);\r\n    }\r\n}\r\nfunction flipCanvasHorizontal(canvas) {\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.scale(-1, 1);\r\n    ctx.translate(-canvas.width, 0);\r\n}\r\nfunction drawWithCompositing(ctx, image, compositeOperation) {\r\n    ctx.globalCompositeOperation = compositeOperation;\r\n    ctx.drawImage(image, 0, 0);\r\n}\r\nfunction createOffScreenCanvas() {\r\n    if (typeof document !== 'undefined') {\r\n        return document.createElement('canvas');\r\n    }\r\n    else if (typeof OffscreenCanvas !== 'undefined') {\r\n        return new OffscreenCanvas(0, 0);\r\n    }\r\n    else {\r\n        throw new Error('Cannot create a canvas in this context');\r\n    }\r\n}\r\nfunction ensureOffscreenCanvasCreated(id) {\r\n    if (!offScreenCanvases[id]) {\r\n        offScreenCanvases[id] = createOffScreenCanvas();\r\n    }\r\n    return offScreenCanvases[id];\r\n}\r\nfunction drawAndBlurImageOnCanvas(image, blurAmount, canvas) {\r\n    var height = image.height, width = image.width;\r\n    var ctx = canvas.getContext('2d');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.save();\r\n    if (isSafari()) {\r\n        blur_1.cpuBlur(canvas, image, blurAmount);\r\n    }\r\n    else {\r\n        // tslint:disable:no-any\r\n        ctx.filter = \"blur(\" + blurAmount + \"px)\";\r\n        ctx.drawImage(image, 0, 0, width, height);\r\n    }\r\n    ctx.restore();\r\n}\r\nfunction drawAndBlurImageOnOffScreenCanvas(image, blurAmount, offscreenCanvasName) {\r\n    var canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\r\n    if (blurAmount === 0) {\r\n        renderImageToCanvas(image, canvas);\r\n    }\r\n    else {\r\n        drawAndBlurImageOnCanvas(image, blurAmount, canvas);\r\n    }\r\n    return canvas;\r\n}\r\nfunction renderImageToCanvas(image, canvas) {\r\n    var width = image.width, height = image.height;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n}\r\n/**\r\n * Draw an image on a canvas\r\n */\r\nfunction renderImageDataToCanvas(image, canvas) {\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.putImageData(image, 0, 0);\r\n}\r\nfunction renderImageDataToOffScreenCanvas(image, canvasName) {\r\n    var canvas = ensureOffscreenCanvasCreated(canvasName);\r\n    renderImageDataToCanvas(image, canvas);\r\n    return canvas;\r\n}\r\n/**\r\n * Given the output from estimating multi-person segmentation, generates an\r\n * image with foreground and background color at each pixel determined by the\r\n * corresponding binary segmentation value at the pixel from the output.  In\r\n * other words, pixels where there is a person will be colored with foreground\r\n * color and where there is not a person will be colored with background color.\r\n *\r\n * @param personOrPartSegmentation The output from\r\n * `segmentPerson`, `segmentMultiPerson`,\r\n * `segmentPersonParts` or `segmentMultiPersonParts`. They can\r\n * be SemanticPersonSegmentation object, an array of PersonSegmentation object,\r\n * SemanticPartSegmentation object, or an array of PartSegmentation object.\r\n *\r\n * @param foreground Default to {r:0, g:0, b:0, a: 0}. The foreground color\r\n * (r,g,b,a) for visualizing pixels that belong to people.\r\n *\r\n * @param background Default to {r:0, g:0, b:0, a: 255}. The background color\r\n * (r,g,b,a) for visualizing pixels that don't belong to people.\r\n *\r\n * @param drawContour Default to false. Whether to draw the contour around each\r\n * person's segmentation mask or body part mask.\r\n *\r\n * @param foregroundIds Default to [1]. The integer values that represent\r\n * foreground. For person segmentation, 1 is the foreground. For body part\r\n * segmentation, it can be a subset of all body parts ids.\r\n *\r\n * @returns An ImageData with the same width and height of\r\n * all the PersonSegmentation in multiPersonSegmentation, with opacity and\r\n * transparency at each pixel determined by the corresponding binary\r\n * segmentation value at the pixel from the output.\r\n */\r\nfunction toMask(personOrPartSegmentation, foreground, background, drawContour, foregroundIds) {\r\n    if (foreground === void 0) { foreground = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        a: 0\r\n    }; }\r\n    if (background === void 0) { background = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        a: 255\r\n    }; }\r\n    if (drawContour === void 0) { drawContour = false; }\r\n    if (foregroundIds === void 0) { foregroundIds = [1]; }\r\n    if (Array.isArray(personOrPartSegmentation) &&\r\n        personOrPartSegmentation.length === 0) {\r\n        return null;\r\n    }\r\n    var multiPersonOrPartSegmentation;\r\n    if (!Array.isArray(personOrPartSegmentation)) {\r\n        multiPersonOrPartSegmentation = [personOrPartSegmentation];\r\n    }\r\n    else {\r\n        multiPersonOrPartSegmentation = personOrPartSegmentation;\r\n    }\r\n    var _a = multiPersonOrPartSegmentation[0], width = _a.width, height = _a.height;\r\n    var bytes = new Uint8ClampedArray(width * height * 4);\r\n    function drawStroke(bytes, row, column, width, radius, color) {\r\n        if (color === void 0) { color = { r: 0, g: 255, b: 255, a: 255 }; }\r\n        for (var i = -radius; i <= radius; i++) {\r\n            for (var j = -radius; j <= radius; j++) {\r\n                if (i !== 0 && j !== 0) {\r\n                    var n = (row + i) * width + (column + j);\r\n                    bytes[4 * n + 0] = color.r;\r\n                    bytes[4 * n + 1] = color.g;\r\n                    bytes[4 * n + 2] = color.b;\r\n                    bytes[4 * n + 3] = color.a;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function isSegmentationBoundary(segmentationData, row, column, width, foregroundIds, radius) {\r\n        if (foregroundIds === void 0) { foregroundIds = [1]; }\r\n        if (radius === void 0) { radius = 1; }\r\n        var numberBackgroundPixels = 0;\r\n        for (var i = -radius; i <= radius; i++) {\r\n            var _loop_2 = function (j) {\r\n                if (i !== 0 && j !== 0) {\r\n                    var n_1 = (row + i) * width + (column + j);\r\n                    if (!foregroundIds.some(function (id) { return id === segmentationData[n_1]; })) {\r\n                        numberBackgroundPixels += 1;\r\n                    }\r\n                }\r\n            };\r\n            for (var j = -radius; j <= radius; j++) {\r\n                _loop_2(j);\r\n            }\r\n        }\r\n        return numberBackgroundPixels > 0;\r\n    }\r\n    for (var i = 0; i < height; i += 1) {\r\n        var _loop_1 = function (j) {\r\n            var n = i * width + j;\r\n            bytes[4 * n + 0] = background.r;\r\n            bytes[4 * n + 1] = background.g;\r\n            bytes[4 * n + 2] = background.b;\r\n            bytes[4 * n + 3] = background.a;\r\n            var _loop_3 = function (k) {\r\n                if (foregroundIds.some(function (id) { return id === multiPersonOrPartSegmentation[k].data[n]; })) {\r\n                    bytes[4 * n] = foreground.r;\r\n                    bytes[4 * n + 1] = foreground.g;\r\n                    bytes[4 * n + 2] = foreground.b;\r\n                    bytes[4 * n + 3] = foreground.a;\r\n                    var isBoundary = isSegmentationBoundary(multiPersonOrPartSegmentation[k].data, i, j, width, foregroundIds);\r\n                    if (drawContour && i - 1 >= 0 && i + 1 < height && j - 1 >= 0 &&\r\n                        j + 1 < width && isBoundary) {\r\n                        drawStroke(bytes, i, j, width, 1);\r\n                    }\r\n                }\r\n            };\r\n            for (var k = 0; k < multiPersonOrPartSegmentation.length; k++) {\r\n                _loop_3(k);\r\n            }\r\n        };\r\n        for (var j = 0; j < width; j += 1) {\r\n            _loop_1(j);\r\n        }\r\n    }\r\n    return new ImageData(bytes, width, height);\r\n}\r\nexports.toMask = toMask;\r\nvar RAINBOW_PART_COLORS = [\r\n    [110, 64, 170], [143, 61, 178], [178, 60, 178], [210, 62, 167],\r\n    [238, 67, 149], [255, 78, 125], [255, 94, 99], [255, 115, 75],\r\n    [255, 140, 56], [239, 167, 47], [217, 194, 49], [194, 219, 64],\r\n    [175, 240, 91], [135, 245, 87], [96, 247, 96], [64, 243, 115],\r\n    [40, 234, 141], [28, 219, 169], [26, 199, 194], [33, 176, 213],\r\n    [47, 150, 224], [65, 125, 224], [84, 101, 214], [99, 81, 195]\r\n];\r\n/**\r\n * Given the output from person body part segmentation (or multi-person\r\n * instance body part segmentation) and an array of colors indexed by part id,\r\n * generates an image with the corresponding color for each part at each pixel,\r\n * and white pixels where there is no part.\r\n *\r\n * @param partSegmentation The output from segmentPersonParts\r\n * or segmentMultiPersonParts. The former is a SemanticPartSegmentation\r\n * object and later is an array of PartSegmentation object.\r\n *\r\n * @param partColors A multi-dimensional array of rgb colors indexed by\r\n * part id.  Must have 24 colors, one for every part.\r\n *\r\n * @returns An ImageData with the same width and height of all the element in\r\n * multiPersonPartSegmentation, with the corresponding color for each part at\r\n * each pixel, and black pixels where there is no part.\r\n */\r\nfunction toColoredPartMask(partSegmentation, partColors) {\r\n    if (partColors === void 0) { partColors = RAINBOW_PART_COLORS; }\r\n    if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\r\n        return null;\r\n    }\r\n    var multiPersonPartSegmentation;\r\n    if (!Array.isArray(partSegmentation)) {\r\n        multiPersonPartSegmentation = [partSegmentation];\r\n    }\r\n    else {\r\n        multiPersonPartSegmentation = partSegmentation;\r\n    }\r\n    var _a = multiPersonPartSegmentation[0], width = _a.width, height = _a.height;\r\n    var bytes = new Uint8ClampedArray(width * height * 4);\r\n    for (var i = 0; i < height * width; ++i) {\r\n        // invert mask.  Invert the segmentation mask.\r\n        var j = i * 4;\r\n        bytes[j + 0] = 255;\r\n        bytes[j + 1] = 255;\r\n        bytes[j + 2] = 255;\r\n        bytes[j + 3] = 255;\r\n        for (var k = 0; k < multiPersonPartSegmentation.length; k++) {\r\n            var partId = multiPersonPartSegmentation[k].data[i];\r\n            if (partId !== -1) {\r\n                var color = partColors[partId];\r\n                if (!color) {\r\n                    throw new Error(\"No color could be found for part id \" + partId);\r\n                }\r\n                bytes[j + 0] = color[0];\r\n                bytes[j + 1] = color[1];\r\n                bytes[j + 2] = color[2];\r\n                bytes[j + 3] = 255;\r\n            }\r\n        }\r\n    }\r\n    return new ImageData(bytes, width, height);\r\n}\r\nexports.toColoredPartMask = toColoredPartMask;\r\nvar CANVAS_NAMES = {\r\n    blurred: 'blurred',\r\n    blurredMask: 'blurred-mask',\r\n    mask: 'mask',\r\n    lowresPartMask: 'lowres-part-mask'\r\n};\r\n/**\r\n * Given an image and a maskImage of type ImageData, draws the image with the\r\n * mask on top of it onto a canvas.\r\n *\r\n * @param canvas The canvas to be drawn onto.\r\n *\r\n * @param image The original image to apply the mask to.\r\n *\r\n * @param maskImage An ImageData containing the mask.  Ideally this should be\r\n * generated by toMask or toColoredPartMask.\r\n *\r\n * @param maskOpacity The opacity of the mask when drawing it on top of the\r\n * image. Defaults to 0.7. Should be a float between 0 and 1.\r\n *\r\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\r\n * Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nfunction drawMask(canvas, image, maskImage, maskOpacity, maskBlurAmount, flipHorizontal) {\r\n    if (maskOpacity === void 0) { maskOpacity = 0.7; }\r\n    if (maskBlurAmount === void 0) { maskBlurAmount = 0; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    ctx.drawImage(image, 0, 0);\r\n    ctx.globalAlpha = maskOpacity;\r\n    if (maskImage) {\r\n        assertSameDimensions({ width: width, height: height }, maskImage, 'image', 'mask');\r\n        var mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\r\n        var blurredMask = drawAndBlurImageOnOffScreenCanvas(mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\r\n        ctx.drawImage(blurredMask, 0, 0, width, height);\r\n    }\r\n    ctx.restore();\r\n}\r\nexports.drawMask = drawMask;\r\n/**\r\n * Given an image and a maskImage of type ImageData, draws the image with the\r\n * pixelated mask on top of it onto a canvas.\r\n *\r\n * @param canvas The canvas to be drawn onto.\r\n *\r\n * @param image The original image to apply the mask to.\r\n *\r\n * @param maskImage An ImageData containing the mask.  Ideally this should be\r\n * generated by toColoredPartMask.\r\n *\r\n * @param maskOpacity The opacity of the mask when drawing it on top of the\r\n * image. Defaults to 0.7. Should be a float between 0 and 1.\r\n *\r\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\r\n * Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\r\n * to false.\r\n *\r\n * @param pixelCellWidth The width of each pixel cell. Default to 10 px.\r\n */\r\nfunction drawPixelatedMask(canvas, image, maskImage, maskOpacity, maskBlurAmount, flipHorizontal, pixelCellWidth) {\r\n    if (maskOpacity === void 0) { maskOpacity = 0.7; }\r\n    if (maskBlurAmount === void 0) { maskBlurAmount = 0; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    if (pixelCellWidth === void 0) { pixelCellWidth = 10.0; }\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    assertSameDimensions({ width: width, height: height }, maskImage, 'image', 'mask');\r\n    var mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\r\n    var blurredMask = drawAndBlurImageOnOffScreenCanvas(mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\r\n    canvas.width = blurredMask.width;\r\n    canvas.height = blurredMask.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    var offscreenCanvas = ensureOffscreenCanvasCreated(CANVAS_NAMES.lowresPartMask);\r\n    var offscreenCanvasCtx = offscreenCanvas.getContext('2d');\r\n    offscreenCanvas.width = blurredMask.width * (1.0 / pixelCellWidth);\r\n    offscreenCanvas.height = blurredMask.height * (1.0 / pixelCellWidth);\r\n    offscreenCanvasCtx.drawImage(blurredMask, 0, 0, blurredMask.width, blurredMask.height, 0, 0, offscreenCanvas.width, offscreenCanvas.height);\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctx.drawImage(offscreenCanvas, 0, 0, offscreenCanvas.width, offscreenCanvas.height, 0, 0, canvas.width, canvas.height);\r\n    // Draws vertical grid lines that are `pixelCellWidth` apart from each other.\r\n    for (var i = 0; i < offscreenCanvas.width; i++) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#ffffff';\r\n        ctx.moveTo(pixelCellWidth * i, 0);\r\n        ctx.lineTo(pixelCellWidth * i, canvas.height);\r\n        ctx.stroke();\r\n    }\r\n    // Draws horizontal grid lines that are `pixelCellWidth` apart from each\r\n    // other.\r\n    for (var i = 0; i < offscreenCanvas.height; i++) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#ffffff';\r\n        ctx.moveTo(0, pixelCellWidth * i);\r\n        ctx.lineTo(canvas.width, pixelCellWidth * i);\r\n        ctx.stroke();\r\n    }\r\n    ctx.globalAlpha = 1.0 - maskOpacity;\r\n    ctx.drawImage(image, 0, 0, blurredMask.width, blurredMask.height);\r\n    ctx.restore();\r\n}\r\nexports.drawPixelatedMask = drawPixelatedMask;\r\nfunction createPersonMask(multiPersonSegmentation, edgeBlurAmount) {\r\n    var backgroundMaskImage = toMask(multiPersonSegmentation, { r: 0, g: 0, b: 0, a: 255 }, { r: 0, g: 0, b: 0, a: 0 });\r\n    var backgroundMask = renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\r\n    if (edgeBlurAmount === 0) {\r\n        return backgroundMask;\r\n    }\r\n    else {\r\n        return drawAndBlurImageOnOffScreenCanvas(backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\r\n    }\r\n}\r\n/**\r\n * Given a personSegmentation and an image, draws the image with its background\r\n * blurred onto the canvas.\r\n *\r\n * @param canvas The canvas to draw the background-blurred image onto.\r\n *\r\n * @param image The image to blur the background of and draw.\r\n *\r\n * @param personSegmentation A SemanticPersonSegmentation or an array of\r\n * PersonSegmentation object.\r\n *\r\n * @param backgroundBlurAmount How many pixels in the background blend into each\r\n * other.  Defaults to 3. Should be an integer between 1 and 20.\r\n *\r\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\r\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nfunction drawBokehEffect(canvas, image, multiPersonSegmentation, backgroundBlurAmount, edgeBlurAmount, flipHorizontal) {\r\n    if (backgroundBlurAmount === void 0) { backgroundBlurAmount = 3; }\r\n    if (edgeBlurAmount === void 0) { edgeBlurAmount = 3; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    var blurredImage = drawAndBlurImageOnOffScreenCanvas(image, backgroundBlurAmount, CANVAS_NAMES.blurred);\r\n    canvas.width = blurredImage.width;\r\n    canvas.height = blurredImage.height;\r\n    var ctx = canvas.getContext('2d');\r\n    if (Array.isArray(multiPersonSegmentation) &&\r\n        multiPersonSegmentation.length === 0) {\r\n        ctx.drawImage(blurredImage, 0, 0);\r\n        return;\r\n    }\r\n    var personMask = createPersonMask(multiPersonSegmentation, edgeBlurAmount);\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    // draw the original image on the final canvas\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    // \"destination-in\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // crop what's not the person using the mask from the original image\r\n    drawWithCompositing(ctx, personMask, 'destination-in');\r\n    // \"destination-over\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // draw the blurred background on top of the original image where it doesn't\r\n    // overlap.\r\n    drawWithCompositing(ctx, blurredImage, 'destination-over');\r\n    ctx.restore();\r\n}\r\nexports.drawBokehEffect = drawBokehEffect;\r\nfunction createBodyPartMask(multiPersonPartSegmentation, bodyPartIdsToMask, edgeBlurAmount) {\r\n    var backgroundMaskImage = toMask(multiPersonPartSegmentation, { r: 0, g: 0, b: 0, a: 0 }, { r: 0, g: 0, b: 0, a: 255 }, true, bodyPartIdsToMask);\r\n    var backgroundMask = renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\r\n    if (edgeBlurAmount === 0) {\r\n        return backgroundMask;\r\n    }\r\n    else {\r\n        return drawAndBlurImageOnOffScreenCanvas(backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\r\n    }\r\n}\r\n/**\r\n * Given a personSegmentation and an image, draws the image with its background\r\n * blurred onto the canvas.\r\n *\r\n * @param canvas The canvas to draw the background-blurred image onto.\r\n *\r\n * @param image The image to blur the background of and draw.\r\n *\r\n * @param partSegmentation A SemanticPartSegmentation or an array of\r\n * PartSegmentation object.\r\n *\r\n * @param bodyPartIdsToBlur Default to [0, 1] (left-face and right-face). An\r\n * array of body part ids to blur. Each must be one of the 24 body part ids.\r\n *\r\n * @param backgroundBlurAmount How many pixels in the background blend into each\r\n * other.  Defaults to 3. Should be an integer between 1 and 20.\r\n *\r\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\r\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nfunction blurBodyPart(canvas, image, partSegmentation, bodyPartIdsToBlur, backgroundBlurAmount, edgeBlurAmount, flipHorizontal) {\r\n    if (bodyPartIdsToBlur === void 0) { bodyPartIdsToBlur = [0, 1]; }\r\n    if (backgroundBlurAmount === void 0) { backgroundBlurAmount = 3; }\r\n    if (edgeBlurAmount === void 0) { edgeBlurAmount = 3; }\r\n    if (flipHorizontal === void 0) { flipHorizontal = false; }\r\n    var blurredImage = drawAndBlurImageOnOffScreenCanvas(image, backgroundBlurAmount, CANVAS_NAMES.blurred);\r\n    canvas.width = blurredImage.width;\r\n    canvas.height = blurredImage.height;\r\n    var ctx = canvas.getContext('2d');\r\n    if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\r\n        ctx.drawImage(blurredImage, 0, 0);\r\n        return;\r\n    }\r\n    var bodyPartMask = createBodyPartMask(partSegmentation, bodyPartIdsToBlur, edgeBlurAmount);\r\n    ctx.save();\r\n    if (flipHorizontal) {\r\n        flipCanvasHorizontal(canvas);\r\n    }\r\n    // draw the original image on the final canvas\r\n    var _a = util_1.getInputSize(image), height = _a[0], width = _a[1];\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    // \"destination-in\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // crop what's not the person using the mask from the original image\r\n    drawWithCompositing(ctx, bodyPartMask, 'destination-in');\r\n    // \"destination-over\" - \"The existing canvas content is kept where both the\r\n    // new shape and existing canvas content overlap. Everything else is made\r\n    // transparent.\"\r\n    // draw the blurred background on top of the original image where it doesn't\r\n    // overlap.\r\n    drawWithCompositing(ctx, blurredImage, 'destination-over');\r\n    ctx.restore();\r\n}\r\nexports.blurBodyPart = blurBodyPart;\r\n"},"lineCount":542}},"error":null,"hash":"055ef67b601c4c3fcaadce4855862929","cacheData":{"env":{}}}