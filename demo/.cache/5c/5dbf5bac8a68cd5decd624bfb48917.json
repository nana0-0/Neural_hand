{"id":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","dependencies":[{"name":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\package.json","includedInParent":true,"mtime":1631872669254},{"name":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\.babelrc","includedInParent":true,"mtime":1631157722000},{"name":"@tensorflow/tfjs-core","loc":{"line":20,"column":17},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\multi_person\\decode_multiple_masks_webgl.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"},{"name":"../keypoints","loc":{"line":21,"column":26},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\multi_person\\decode_multiple_masks_webgl.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\keypoints.js"},{"name":"./util","loc":{"line":22,"column":21},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\multi_person\\decode_multiple_masks_webgl.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\multi_person\\util.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexports.__esModule = true;\r\nexports.decodeMultipleMasksWebGl = void 0;\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar keypoints_1 = require(\"../keypoints\");\r\nvar util_1 = require(\"./util\");\r\nfunction decodeMultipleMasksWebGl(segmentation, longOffsets, posesAboveScore, height, width, stride, _a, padding, refineSteps, minKptScore, maxNumPeople) {\r\n    var inHeight = _a[0], inWidth = _a[1];\r\n    // The height/width of the image/canvas itself.\r\n    var _b = segmentation.shape, origHeight = _b[0], origWidth = _b[1];\r\n    // The height/width of the output of the model.\r\n    var _c = longOffsets.shape.slice(0, 2), outHeight = _c[0], outWidth = _c[1];\r\n    var shapedLongOffsets = tf.reshape(longOffsets, [outHeight, outWidth, 2, keypoints_1.NUM_KEYPOINTS]);\r\n    // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\r\n    // the last 3 coordinates correspond to the score, h and w coordinate of that\r\n    // keypoint.\r\n    var poseVals = new Float32Array(maxNumPeople * keypoints_1.NUM_KEYPOINTS * 3).fill(0.0);\r\n    for (var i = 0; i < posesAboveScore.length; i++) {\r\n        var poseOffset = i * keypoints_1.NUM_KEYPOINTS * 3;\r\n        var pose = posesAboveScore[i];\r\n        for (var kp = 0; kp < keypoints_1.NUM_KEYPOINTS; kp++) {\r\n            var keypoint = pose.keypoints[kp];\r\n            var offset = poseOffset + kp * 3;\r\n            poseVals[offset] = keypoint.score;\r\n            poseVals[offset + 1] = keypoint.position.y;\r\n            poseVals[offset + 2] = keypoint.position.x;\r\n        }\r\n    }\r\n    var _d = util_1.getScale([height, width], [inHeight, inWidth], padding), scaleX = _d[0], scaleY = _d[1];\r\n    var posesTensor = tf.tensor(poseVals, [maxNumPeople, keypoints_1.NUM_KEYPOINTS, 3]);\r\n    var padT = padding.top, padL = padding.left;\r\n    var program = {\r\n        variableNames: ['segmentation', 'longOffsets', 'poses'],\r\n        outputShape: [origHeight, origWidth],\r\n        userCode: \"\\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\\n    }\\n\\n    float convertToPositionInOutputFloat(\\n        int pos, int pad, float scale, int stride) {\\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\\n    }\\n\\n    float dist(float x1, float y1, float x2, float y2) {\\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\\n    }\\n\\n    float sampleLongOffsets(float h, float w, int d, int k) {\\n      float fh = fract(h);\\n      float fw = fract(w);\\n      int clH = int(ceil(h));\\n      int clW = int(ceil(w));\\n      int flH = int(floor(h));\\n      int flW = int(floor(w));\\n      float o11 = getLongOffsets(flH, flW, d, k);\\n      float o12 = getLongOffsets(flH, clW, d, k);\\n      float o21 = getLongOffsets(clH, flW, d, k);\\n      float o22 = getLongOffsets(clH, clW, d, k);\\n      float o1 = mix(o11, o12, fw);\\n      float o2 = mix(o21, o22, fw);\\n      return mix(o1, o2, fh);\\n    }\\n\\n    int findNearestPose(int h, int w) {\\n      float prob = getSegmentation(h, w);\\n      if (prob < 1.0) {\\n        return -1;\\n      }\\n\\n      // Done(Tyler): convert from output space h/w to strided space.\\n      float stridedH = convertToPositionInOutputFloat(\\n        h, \" + padT + \", \" + scaleY + \", \" + stride + \");\\n      float stridedW = convertToPositionInOutputFloat(\\n        w, \" + padL + \", \" + scaleX + \", \" + stride + \");\\n\\n      float minDist = 1000000.0;\\n      int iMin = -1;\\n      for (int i = 0; i < \" + maxNumPeople + \"; i++) {\\n        float curDistSum = 0.0;\\n        int numKpt = 0;\\n        for (int k = 0; k < \" + keypoints_1.NUM_KEYPOINTS + \"; k++) {\\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\\n\\n          float y = float(h) + dy;\\n          float x = float(w) + dx;\\n\\n          for (int s = 0; s < \" + refineSteps + \"; s++) {\\n            int yRounded = round(min(y, float(\" + (height - 1.0) + \")));\\n            int xRounded = round(min(x, float(\" + (width - 1.0) + \")));\\n\\n            float yStrided = convertToPositionInOutputFloat(\\n              yRounded, \" + padT + \", \" + scaleY + \", \" + stride + \");\\n            float xStrided = convertToPositionInOutputFloat(\\n              xRounded, \" + padL + \", \" + scaleX + \", \" + stride + \");\\n\\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\\n\\n            y = y + dy;\\n            x = x + dx;\\n          }\\n\\n          float poseScore = getPoses(i, k, 0);\\n          float poseY = getPoses(i, k, 1);\\n          float poseX = getPoses(i, k, 2);\\n          if (poseScore > \" + minKptScore + \") {\\n            numKpt = numKpt + 1;\\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\\n          }\\n        }\\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\\n          minDist = curDistSum / float(numKpt);\\n          iMin = i;\\n        }\\n      }\\n      return iMin;\\n    }\\n\\n    void main() {\\n        ivec2 coords = getOutputCoords();\\n        int nearestPose = findNearestPose(coords[0], coords[1]);\\n        setOutput(float(nearestPose));\\n      }\\n  \"\r\n    };\r\n    var webglBackend = tf.backend();\r\n    return webglBackend.compileAndRun(program, [segmentation, shapedLongOffsets, posesTensor]);\r\n}\r\nexports.decodeMultipleMasksWebGl = decodeMultipleMasksWebGl;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}}],"sources":{"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexports.__esModule = true;\r\nexports.decodeMultipleMasksWebGl = void 0;\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar keypoints_1 = require(\"../keypoints\");\r\nvar util_1 = require(\"./util\");\r\nfunction decodeMultipleMasksWebGl(segmentation, longOffsets, posesAboveScore, height, width, stride, _a, padding, refineSteps, minKptScore, maxNumPeople) {\r\n    var inHeight = _a[0], inWidth = _a[1];\r\n    // The height/width of the image/canvas itself.\r\n    var _b = segmentation.shape, origHeight = _b[0], origWidth = _b[1];\r\n    // The height/width of the output of the model.\r\n    var _c = longOffsets.shape.slice(0, 2), outHeight = _c[0], outWidth = _c[1];\r\n    var shapedLongOffsets = tf.reshape(longOffsets, [outHeight, outWidth, 2, keypoints_1.NUM_KEYPOINTS]);\r\n    // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\r\n    // the last 3 coordinates correspond to the score, h and w coordinate of that\r\n    // keypoint.\r\n    var poseVals = new Float32Array(maxNumPeople * keypoints_1.NUM_KEYPOINTS * 3).fill(0.0);\r\n    for (var i = 0; i < posesAboveScore.length; i++) {\r\n        var poseOffset = i * keypoints_1.NUM_KEYPOINTS * 3;\r\n        var pose = posesAboveScore[i];\r\n        for (var kp = 0; kp < keypoints_1.NUM_KEYPOINTS; kp++) {\r\n            var keypoint = pose.keypoints[kp];\r\n            var offset = poseOffset + kp * 3;\r\n            poseVals[offset] = keypoint.score;\r\n            poseVals[offset + 1] = keypoint.position.y;\r\n            poseVals[offset + 2] = keypoint.position.x;\r\n        }\r\n    }\r\n    var _d = util_1.getScale([height, width], [inHeight, inWidth], padding), scaleX = _d[0], scaleY = _d[1];\r\n    var posesTensor = tf.tensor(poseVals, [maxNumPeople, keypoints_1.NUM_KEYPOINTS, 3]);\r\n    var padT = padding.top, padL = padding.left;\r\n    var program = {\r\n        variableNames: ['segmentation', 'longOffsets', 'poses'],\r\n        outputShape: [origHeight, origWidth],\r\n        userCode: \"\\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\\n    }\\n\\n    float convertToPositionInOutputFloat(\\n        int pos, int pad, float scale, int stride) {\\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\\n    }\\n\\n    float dist(float x1, float y1, float x2, float y2) {\\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\\n    }\\n\\n    float sampleLongOffsets(float h, float w, int d, int k) {\\n      float fh = fract(h);\\n      float fw = fract(w);\\n      int clH = int(ceil(h));\\n      int clW = int(ceil(w));\\n      int flH = int(floor(h));\\n      int flW = int(floor(w));\\n      float o11 = getLongOffsets(flH, flW, d, k);\\n      float o12 = getLongOffsets(flH, clW, d, k);\\n      float o21 = getLongOffsets(clH, flW, d, k);\\n      float o22 = getLongOffsets(clH, clW, d, k);\\n      float o1 = mix(o11, o12, fw);\\n      float o2 = mix(o21, o22, fw);\\n      return mix(o1, o2, fh);\\n    }\\n\\n    int findNearestPose(int h, int w) {\\n      float prob = getSegmentation(h, w);\\n      if (prob < 1.0) {\\n        return -1;\\n      }\\n\\n      // Done(Tyler): convert from output space h/w to strided space.\\n      float stridedH = convertToPositionInOutputFloat(\\n        h, \" + padT + \", \" + scaleY + \", \" + stride + \");\\n      float stridedW = convertToPositionInOutputFloat(\\n        w, \" + padL + \", \" + scaleX + \", \" + stride + \");\\n\\n      float minDist = 1000000.0;\\n      int iMin = -1;\\n      for (int i = 0; i < \" + maxNumPeople + \"; i++) {\\n        float curDistSum = 0.0;\\n        int numKpt = 0;\\n        for (int k = 0; k < \" + keypoints_1.NUM_KEYPOINTS + \"; k++) {\\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\\n\\n          float y = float(h) + dy;\\n          float x = float(w) + dx;\\n\\n          for (int s = 0; s < \" + refineSteps + \"; s++) {\\n            int yRounded = round(min(y, float(\" + (height - 1.0) + \")));\\n            int xRounded = round(min(x, float(\" + (width - 1.0) + \")));\\n\\n            float yStrided = convertToPositionInOutputFloat(\\n              yRounded, \" + padT + \", \" + scaleY + \", \" + stride + \");\\n            float xStrided = convertToPositionInOutputFloat(\\n              xRounded, \" + padL + \", \" + scaleX + \", \" + stride + \");\\n\\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\\n\\n            y = y + dy;\\n            x = x + dx;\\n          }\\n\\n          float poseScore = getPoses(i, k, 0);\\n          float poseY = getPoses(i, k, 1);\\n          float poseX = getPoses(i, k, 2);\\n          if (poseScore > \" + minKptScore + \") {\\n            numKpt = numKpt + 1;\\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\\n          }\\n        }\\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\\n          minDist = curDistSum / float(numKpt);\\n          iMin = i;\\n        }\\n      }\\n      return iMin;\\n    }\\n\\n    void main() {\\n        ivec2 coords = getOutputCoords();\\n        int nearestPose = findNearestPose(coords[0], coords[1]);\\n        setOutput(float(nearestPose));\\n      }\\n  \"\r\n    };\r\n    var webglBackend = tf.backend();\r\n    return webglBackend.compileAndRun(program, [segmentation, shapedLongOffsets, posesTensor]);\r\n}\r\nexports.decodeMultipleMasksWebGl = decodeMultipleMasksWebGl;\r\n"},"lineCount":57}},"error":null,"hash":"ae79578d49626650f0d53ad8661fb313","cacheData":{"env":{}}}