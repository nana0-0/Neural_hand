{"id":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","dependencies":[{"name":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\package.json","includedInParent":true,"mtime":1631872669254},{"name":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\.babelrc","includedInParent":true,"mtime":1631157722000},{"name":"@tensorflow/tfjs-converter","loc":{"line":67,"column":21},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow\\tfjs-converter\\dist\\index.js"},{"name":"@tensorflow/tfjs-core","loc":{"line":68,"column":17},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"},{"name":"./decode_part_map","loc":{"line":69,"column":32},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\decode_part_map.js"},{"name":"./mobilenet","loc":{"line":70,"column":26},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\mobilenet.js"},{"name":"./multi_person/decode_instance_masks","loc":{"line":71,"column":38},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\multi_person\\decode_instance_masks.js"},{"name":"./multi_person/decode_multiple_poses","loc":{"line":72,"column":38},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\multi_person\\decode_multiple_poses.js"},{"name":"./resnet","loc":{"line":73,"column":23},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\resnet.js"},{"name":"./saved_models","loc":{"line":74,"column":29},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\saved_models.js"},{"name":"./util","loc":{"line":75,"column":21},"parent":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\body_pix_model.js","resolved":"C:\\Users\\21aw0128\\Desktop\\body-pix\\demo\\node_modules\\@tensorflow-models\\body-pix\\util.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.load = exports.BodyPix = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG = exports.PERSON_INFERENCE_CONFIG = void 0;\r\nvar tfconv = require(\"@tensorflow/tfjs-converter\");\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar decode_part_map_1 = require(\"./decode_part_map\");\r\nvar mobilenet_1 = require(\"./mobilenet\");\r\nvar decode_instance_masks_1 = require(\"./multi_person/decode_instance_masks\");\r\nvar decode_multiple_poses_1 = require(\"./multi_person/decode_multiple_poses\");\r\nvar resnet_1 = require(\"./resnet\");\r\nvar saved_models_1 = require(\"./saved_models\");\r\nvar util_1 = require(\"./util\");\r\nvar APPLY_SIGMOID_ACTIVATION = true;\r\nvar FLIP_POSES_AFTER_SCALING = false;\r\n// The default configuration for loading MobileNetV1 based BodyPix.\r\n//\r\n// (And for references, the default configuration for loading ResNet\r\n// based PoseNet is also included).\r\n//\r\n// ```\r\n// const RESNET_CONFIG = {\r\n//   architecture: 'ResNet50',\r\n//   outputStride: 32,\r\n//   quantBytes: 4,\r\n// } as ModelConfig;\r\n// ```\r\nvar MOBILENET_V1_CONFIG = {\r\n    architecture: 'MobileNetV1',\r\n    outputStride: 16,\r\n    quantBytes: 4,\r\n    multiplier: 0.75\r\n};\r\nvar VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\r\nvar VALID_STRIDE = {\r\n    'MobileNetV1': [8, 16, 32],\r\n    'ResNet50': [32, 16]\r\n};\r\nvar VALID_MULTIPLIER = {\r\n    'MobileNetV1': [0.50, 0.75, 1.0],\r\n    'ResNet50': [1.0]\r\n};\r\nvar VALID_QUANT_BYTES = [1, 2, 4];\r\nfunction validateModelConfig(config) {\r\n    config = config || MOBILENET_V1_CONFIG;\r\n    if (config.architecture == null) {\r\n        config.architecture = 'MobileNetV1';\r\n    }\r\n    if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\r\n        throw new Error(\"Invalid architecture \" + config.architecture + \". \" +\r\n            (\"Should be one of \" + VALID_ARCHITECTURE));\r\n    }\r\n    if (config.outputStride == null) {\r\n        config.outputStride = 16;\r\n    }\r\n    if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\r\n        throw new Error(\"Invalid outputStride \" + config.outputStride + \". \" +\r\n            (\"Should be one of \" + VALID_STRIDE[config.architecture] + \" \") +\r\n            (\"for architecture \" + config.architecture + \".\"));\r\n    }\r\n    if (config.multiplier == null) {\r\n        config.multiplier = 1.0;\r\n    }\r\n    if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\r\n        throw new Error(\"Invalid multiplier \" + config.multiplier + \". \" +\r\n            (\"Should be one of \" + VALID_MULTIPLIER[config.architecture] + \" \") +\r\n            (\"for architecture \" + config.architecture + \".\"));\r\n    }\r\n    if (config.quantBytes == null) {\r\n        config.quantBytes = 4;\r\n    }\r\n    if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\r\n        throw new Error(\"Invalid quantBytes \" + config.quantBytes + \". \" +\r\n            (\"Should be one of \" + VALID_QUANT_BYTES + \" \") +\r\n            (\"for architecture \" + config.architecture + \".\"));\r\n    }\r\n    return config;\r\n}\r\nexports.PERSON_INFERENCE_CONFIG = {\r\n    flipHorizontal: false,\r\n    internalResolution: 'medium',\r\n    segmentationThreshold: 0.7,\r\n    maxDetections: 10,\r\n    scoreThreshold: 0.4,\r\n    nmsRadius: 20\r\n};\r\nexports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG = {\r\n    flipHorizontal: false,\r\n    internalResolution: 'medium',\r\n    segmentationThreshold: 0.7,\r\n    maxDetections: 10,\r\n    scoreThreshold: 0.4,\r\n    nmsRadius: 20,\r\n    minKeypointScore: 0.3,\r\n    refineSteps: 10\r\n};\r\nfunction validatePersonInferenceConfig(config) {\r\n    var segmentationThreshold = config.segmentationThreshold, maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius;\r\n    if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\r\n        throw new Error(\"segmentationThreshold \" + segmentationThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (maxDetections <= 0) {\r\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\r\n            \"Should be > 0\");\r\n    }\r\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (nmsRadius <= 0) {\r\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\r\n    }\r\n}\r\nfunction validateMultiPersonInstanceInferenceConfig(config) {\r\n    var segmentationThreshold = config.segmentationThreshold, maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius, minKeypointScore = config.minKeypointScore, refineSteps = config.refineSteps;\r\n    if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\r\n        throw new Error(\"segmentationThreshold \" + segmentationThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (maxDetections <= 0) {\r\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\r\n            \"Should be > 0\");\r\n    }\r\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (nmsRadius <= 0) {\r\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\r\n    }\r\n    if (minKeypointScore < 0 || minKeypointScore > 1) {\r\n        throw new Error(\"Invalid minKeypointScore \" + minKeypointScore + \".\" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (refineSteps <= 0 || refineSteps > 20) {\r\n        throw new Error(\"Invalid refineSteps \" + refineSteps + \".\" +\r\n            \"Should be in range [1, 20]\");\r\n    }\r\n}\r\nvar BodyPix = /** @class */ (function () {\r\n    function BodyPix(net) {\r\n        this.baseModel = net;\r\n    }\r\n    BodyPix.prototype.predictForPersonSegmentation = function (input) {\r\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n        return {\r\n            segmentLogits: segmentation,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd\r\n        };\r\n    };\r\n    BodyPix.prototype.predictForPersonSegmentationAndPart = function (input) {\r\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, partHeatmaps = _a.partHeatmaps, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n        return {\r\n            segmentLogits: segmentation,\r\n            partHeatmapLogits: partHeatmaps,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd\r\n        };\r\n    };\r\n    BodyPix.prototype.predictForMultiPersonInstanceSegmentationAndPart = function (input) {\r\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, partHeatmaps = _a.partHeatmaps;\r\n        return {\r\n            segmentLogits: segmentation,\r\n            longOffsets: longOffsets,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd,\r\n            partHeatmaps: partHeatmaps\r\n        };\r\n    };\r\n    /**\r\n     * Given an image with people, returns a dictionary of all intermediate\r\n     * tensors including: 1) a binary array with 1 for the pixels that are part of\r\n     * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param internalResolution Defaults to 'medium'. The internal resolution\r\n     * that the input is resized to before inference. The larger the\r\n     * internalResolution the more accurate the model at the cost of slower\r\n     * prediction times. Available values are 'low', 'medium', 'high', 'full', or\r\n     * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n     * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n     *\r\n     * @param segmentationThreshold The minimum that segmentation values must have\r\n     * to be considered part of the person. Affects the generation of the\r\n     * segmentation mask.\r\n     *\r\n     * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\r\n     * and `padding`:\r\n     * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\r\n     * person, and 0 otherwise. The width and height correspond to the same\r\n     * dimensions of the input image.\r\n     * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\r\n     * pose estimation decoding.\r\n     * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\r\n     * estimation decoding.\r\n     * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\r\n     * by pose estimation decoding.\r\n     * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\r\n     * by pose estimation decoding.\r\n     * - `padding`: The padding (unit pixels) being applied to the input image\r\n     * before it is fed into the model.\r\n     */\r\n    BodyPix.prototype.segmentPersonActivation = function (input, internalResolution, segmentationThreshold) {\r\n        var _this = this;\r\n        if (segmentationThreshold === void 0) { segmentationThreshold = 0.5; }\r\n        var _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n        var internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\r\n        var _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n        var _c = tf.tidy(function () {\r\n            var _a = _this.predictForPersonSegmentation(resized), segmentLogits = _a.segmentLogits, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n            var _b = resized.shape, resizedHeight = _b[0], resizedWidth = _b[1];\r\n            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n            return {\r\n                segmentation: decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold),\r\n                heatmapScores: heatmapScores,\r\n                offsets: offsets,\r\n                displacementFwd: displacementFwd,\r\n                displacementBwd: displacementBwd\r\n            };\r\n        }), segmentation = _c.segmentation, heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n        resized.dispose();\r\n        return {\r\n            segmentation: segmentation,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd,\r\n            padding: padding,\r\n            internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\r\n        };\r\n    };\r\n    /**\r\n     * Given an image with many people, returns a PersonSegmentation dictionary\r\n     * that contains the segmentation mask for all people and a single pose.\r\n     *\r\n     * Note: The segmentation mask returned by this method covers all people but\r\n     * the pose works well for one person. If you want to estimate instance-level\r\n     * multiple person segmentation & pose for each person, use\r\n     * `segmentMultiPerson` instead.\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param config PersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using person decoding.\r\n     *\r\n     * @return A SemanticPersonSegmentation dictionary that contains height,\r\n     * width, the flattened binary segmentation mask and the poses for all people.\r\n     * The width and height correspond to the same dimensions of the input image.\r\n     * - `height`: The height of the segmentation data in pixel unit.\r\n     * - `width`: The width of the segmentation data in pixel unit.\r\n     * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\r\n     * belongs to a person and 0 means the pixel doesn't belong to a person. The\r\n     * size of the array is equal to `height` x `width` in row-major order.\r\n     * - `allPoses`: The 2d poses of all people.\r\n     */\r\n    BodyPix.prototype.segmentPerson = function (input, config) {\r\n        if (config === void 0) { config = exports.PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, segmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, result, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.PERSON_INFERENCE_CONFIG), config);\r\n                        validatePersonInferenceConfig(config);\r\n                        _a = this.segmentPersonActivation(input, config.internalResolution, config.segmentationThreshold), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\r\n                        _b = segmentation.shape, height = _b[0], width = _b[1];\r\n                        return [4 /*yield*/, segmentation.data()];\r\n                    case 1:\r\n                        result = _c.sent();\r\n                        segmentation.dispose();\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\r\n                    case 2:\r\n                        tensorBuffers = _c.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        return [2 /*return*/, { height: height, width: width, data: result, allPoses: poses }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an image with multiple people, returns an *array* of\r\n     * PersonSegmentation object. Each element in the array corresponding to one\r\n     * of the people in the input image. In other words, it predicts\r\n     * instance-level multiple person segmentation & pose for each person.\r\n     *\r\n     * The model does standard ImageNet pre-processing before inferring through\r\n     * the model. The image pixels should have values [0-255].\r\n     *\r\n     * @param input\r\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\r\n     * image to feed through the network.\r\n     *\r\n     * @param config MultiPersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using multi-person decoding.\r\n     *\r\n     * @return An array of PersonSegmentation object, each containing a width,\r\n     * height, a binary array (1 for the pixels that are part of the\r\n     * person, and 0 otherwise) and 2D pose. The array size corresponds to the\r\n     * number of pixels in the image. The width and height correspond to the\r\n     * dimensions of the image the binary array is shaped to, which are the same\r\n     * dimensions of the input image.\r\n     */\r\n    BodyPix.prototype.segmentMultiPerson = function (input, config) {\r\n        if (config === void 0) { config = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\r\n            var _this = this;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG), config);\r\n                        validateMultiPersonInstanceInferenceConfig(config);\r\n                        _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n                        internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\r\n                        _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n                        _c = tf.tidy(function () {\r\n                            var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n                            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            var longOffsetsResized = false;\r\n                            var scaledLongOffsets;\r\n                            if (longOffsetsResized) {\r\n                                scaledLongOffsets = util_1.scaleAndCropToInputTensorShape(longOffsets, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            }\r\n                            else {\r\n                                scaledLongOffsets = longOffsets;\r\n                            }\r\n                            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\r\n                            return {\r\n                                segmentation: segmentation,\r\n                                longOffsets: scaledLongOffsets,\r\n                                heatmapScoresRaw: heatmapScores,\r\n                                offsetsRaw: offsets,\r\n                                displacementFwdRaw: displacementFwd,\r\n                                displacementBwdRaw: displacementBwd\r\n                            };\r\n                        }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw;\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\r\n                    case 1:\r\n                        tensorBuffers = _d.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        return [4 /*yield*/, decode_instance_masks_1.decodePersonInstanceMasks(segmentation, longOffsets, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\r\n                    case 2:\r\n                        instanceMasks = _d.sent();\r\n                        resized.dispose();\r\n                        segmentation.dispose();\r\n                        longOffsets.dispose();\r\n                        heatmapScoresRaw.dispose();\r\n                        offsetsRaw.dispose();\r\n                        displacementFwdRaw.dispose();\r\n                        displacementBwdRaw.dispose();\r\n                        return [2 /*return*/, instanceMasks];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an image with many people, returns a dictionary containing: height,\r\n     * width, a tensor with a part id from 0-24 for the pixels that are\r\n     * part of a corresponding body part, and -1 otherwise. This does standard\r\n     * ImageNet pre-processing before inferring through the model.  The image\r\n     * should pixels should have values [0-255].\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param internalResolution Defaults to 'medium'. The internal resolution\r\n     * percentage that the input is resized to before inference. The larger the\r\n     * internalResolution the more accurate the model at the cost of slower\r\n     * prediction times. Available values are 'low', 'medium', 'high', 'full', or\r\n     * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n     * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n     *\r\n     * @param segmentationThreshold The minimum that segmentation values must have\r\n     * to be considered part of the person.  Affects the clipping of the colored\r\n     * part image.\r\n     *\r\n     * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\r\n     * `offsets`, and `padding`:\r\n     * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\r\n     * the pixels that are part of a corresponding body part, and -1 otherwise.\r\n     * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\r\n     * single-person pose estimation decoding.\r\n     * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\r\n     * estimation decoding.\r\n     * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\r\n     * used by pose estimation decoding.\r\n     * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\r\n     * by pose estimation decoding.\r\n     * - `padding`: The padding (unit pixels) being applied to the input image\r\n     * before it is fed into the model.\r\n     */\r\n    BodyPix.prototype.segmentPersonPartsActivation = function (input, internalResolution, segmentationThreshold) {\r\n        var _this = this;\r\n        if (segmentationThreshold === void 0) { segmentationThreshold = 0.5; }\r\n        var _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n        var internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\r\n        var _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n        var _c = tf.tidy(function () {\r\n            var _a = _this.predictForPersonSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, partHeatmapLogits = _a.partHeatmapLogits, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n            var _b = resized.shape, resizedHeight = _b[0], resizedWidth = _b[1];\r\n            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n            var scaledPartHeatmapScore = util_1.scaleAndCropToInputTensorShape(partHeatmapLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold);\r\n            return {\r\n                partSegmentation: decode_part_map_1.decodePartSegmentation(segmentation, scaledPartHeatmapScore),\r\n                heatmapScores: heatmapScores,\r\n                offsets: offsets,\r\n                displacementFwd: displacementFwd,\r\n                displacementBwd: displacementBwd\r\n            };\r\n        }), partSegmentation = _c.partSegmentation, heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n        resized.dispose();\r\n        return {\r\n            partSegmentation: partSegmentation,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd,\r\n            padding: padding,\r\n            internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\r\n        };\r\n    };\r\n    /**\r\n     * Given an image with many people, returns a PartSegmentation dictionary that\r\n     * contains the body part segmentation mask for all people and a single pose.\r\n     *\r\n     * Note: The body part segmentation mask returned by this method covers all\r\n     * people but the pose works well when there is one person. If you want to\r\n     * estimate instance-level multiple person body part segmentation & pose for\r\n     * each person, use `segmentMultiPersonParts` instead.\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param config PersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using single person decoding.\r\n     *\r\n     * @return A SemanticPartSegmentation dictionary that contains height, width,\r\n     * the flattened binary segmentation mask and the pose for the person. The\r\n     * width and height correspond to the same dimensions of the input image.\r\n     * - `height`: The height of the person part segmentation data in pixel unit.\r\n     * - `width`: The width of the person part segmentation data in pixel unit.\r\n     * - `data`: The flattened Int32Array of person part segmentation data with a\r\n     * part id from 0-24 for the pixels that are part of a corresponding body\r\n     * part, and -1 otherwise. The size of the array is equal to `height` x\r\n     * `width` in row-major order.\r\n     * - `allPoses`: The 2d poses of all people.\r\n     */\r\n    BodyPix.prototype.segmentPersonParts = function (input, config) {\r\n        if (config === void 0) { config = exports.PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, partSegmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, data, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.PERSON_INFERENCE_CONFIG), config);\r\n                        validatePersonInferenceConfig(config);\r\n                        _a = this.segmentPersonPartsActivation(input, config.internalResolution, config.segmentationThreshold), partSegmentation = _a.partSegmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\r\n                        _b = partSegmentation.shape, height = _b[0], width = _b[1];\r\n                        return [4 /*yield*/, partSegmentation.data()];\r\n                    case 1:\r\n                        data = _c.sent();\r\n                        partSegmentation.dispose();\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\r\n                    case 2:\r\n                        tensorBuffers = _c.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        return [2 /*return*/, { height: height, width: width, data: data, allPoses: poses }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an image with multiple people, returns an *array* of PartSegmentation\r\n     * object. Each element in the array corresponding to one\r\n     * of the people in the input image. In other words, it predicts\r\n     * instance-level multiple person body part segmentation & pose for each\r\n     * person.\r\n     *\r\n     * This does standard ImageNet pre-processing before inferring through\r\n     * the model. The image pixels should have values [0-255].\r\n     *\r\n     * @param input\r\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\r\n     * image to feed through the network.\r\n     *\r\n     * @param config MultiPersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using multi-person decoding.\r\n     *\r\n     * @return An array of PartSegmentation object, each containing a width,\r\n     * height, a flattened array (with part id from 0-24 for the pixels that are\r\n     * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\r\n     * and height correspond to the dimensions of the image. Each flattened part\r\n     * segmentation array size is equal to `height` x `width`.\r\n     */\r\n    BodyPix.prototype.segmentMultiPersonParts = function (input, config) {\r\n        if (config === void 0) { config = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, partSegmentation, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\r\n            var _this = this;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG), config);\r\n                        validateMultiPersonInstanceInferenceConfig(config);\r\n                        _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n                        internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\r\n                        _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n                        _c = tf.tidy(function () {\r\n                            var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, partHeatmaps = _a.partHeatmaps;\r\n                            // decoding with scaling.\r\n                            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            // decoding with scaling.\r\n                            var scaledPartSegmentationScores = util_1.scaleAndCropToInputTensorShape(partHeatmaps, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            var scaledLongOffsets = longOffsets;\r\n                            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\r\n                            var partSegmentation = decode_part_map_1.decodeOnlyPartSegmentation(scaledPartSegmentationScores);\r\n                            return {\r\n                                segmentation: segmentation,\r\n                                longOffsets: scaledLongOffsets,\r\n                                heatmapScoresRaw: heatmapScores,\r\n                                offsetsRaw: offsets,\r\n                                displacementFwdRaw: displacementFwd,\r\n                                displacementBwdRaw: displacementBwd,\r\n                                partSegmentation: partSegmentation\r\n                            };\r\n                        }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw, partSegmentation = _c.partSegmentation;\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\r\n                    case 1:\r\n                        tensorBuffers = _d.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        return [4 /*yield*/, decode_instance_masks_1.decodePersonInstancePartMasks(segmentation, longOffsets, partSegmentation, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\r\n                    case 2:\r\n                        instanceMasks = _d.sent();\r\n                        resized.dispose();\r\n                        segmentation.dispose();\r\n                        longOffsets.dispose();\r\n                        heatmapScoresRaw.dispose();\r\n                        offsetsRaw.dispose();\r\n                        displacementFwdRaw.dispose();\r\n                        displacementBwdRaw.dispose();\r\n                        partSegmentation.dispose();\r\n                        return [2 /*return*/, instanceMasks];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    BodyPix.prototype.dispose = function () {\r\n        this.baseModel.dispose();\r\n    };\r\n    return BodyPix;\r\n}());\r\nexports.BodyPix = BodyPix;\r\n/**\r\n * Loads the MobileNet BodyPix model.\r\n */\r\nfunction loadMobileNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, multiplier, url, graphModel, mobilenet;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    multiplier = config.multiplier;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = saved_models_1.mobileNetSavedModel(outputStride, multiplier, quantBytes);\r\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    mobilenet = new mobilenet_1.MobileNet(graphModel, outputStride);\r\n                    return [2 /*return*/, new BodyPix(mobilenet)];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Loads the ResNet BodyPix model.\r\n */\r\nfunction loadResNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, url, graphModel, resnet;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = saved_models_1.resNet50SavedModel(outputStride, quantBytes);\r\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    resnet = new resnet_1.ResNet(graphModel, outputStride);\r\n                    return [2 /*return*/, new BodyPix(resnet)];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\r\n * or MobileNet architecture. The model to be loaded is configurable using the\r\n * config dictionary ModelConfig. Please find more details in the\r\n * documentation of the ModelConfig.\r\n *\r\n * @param config ModelConfig dictionary that contains parameters for\r\n * the BodyPix loading process. Please find more details of each parameters\r\n * in the documentation of the ModelConfig interface. The predefined\r\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\r\n * for defining your customized config.\r\n */\r\nfunction load(config) {\r\n    if (config === void 0) { config = MOBILENET_V1_CONFIG; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            config = validateModelConfig(config);\r\n            if (config.architecture === 'ResNet50') {\r\n                return [2 /*return*/, loadResNet(config)];\r\n            }\r\n            else if (config.architecture === 'MobileNetV1') {\r\n                return [2 /*return*/, loadMobileNet(config)];\r\n            }\r\n            else {\r\n                return [2 /*return*/, null];\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nexports.load = load;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}}],"sources":{"node_modules/@tensorflow-models/body-pix/body_pix_model.js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.load = exports.BodyPix = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG = exports.PERSON_INFERENCE_CONFIG = void 0;\r\nvar tfconv = require(\"@tensorflow/tfjs-converter\");\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar decode_part_map_1 = require(\"./decode_part_map\");\r\nvar mobilenet_1 = require(\"./mobilenet\");\r\nvar decode_instance_masks_1 = require(\"./multi_person/decode_instance_masks\");\r\nvar decode_multiple_poses_1 = require(\"./multi_person/decode_multiple_poses\");\r\nvar resnet_1 = require(\"./resnet\");\r\nvar saved_models_1 = require(\"./saved_models\");\r\nvar util_1 = require(\"./util\");\r\nvar APPLY_SIGMOID_ACTIVATION = true;\r\nvar FLIP_POSES_AFTER_SCALING = false;\r\n// The default configuration for loading MobileNetV1 based BodyPix.\r\n//\r\n// (And for references, the default configuration for loading ResNet\r\n// based PoseNet is also included).\r\n//\r\n// ```\r\n// const RESNET_CONFIG = {\r\n//   architecture: 'ResNet50',\r\n//   outputStride: 32,\r\n//   quantBytes: 4,\r\n// } as ModelConfig;\r\n// ```\r\nvar MOBILENET_V1_CONFIG = {\r\n    architecture: 'MobileNetV1',\r\n    outputStride: 16,\r\n    quantBytes: 4,\r\n    multiplier: 0.75\r\n};\r\nvar VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\r\nvar VALID_STRIDE = {\r\n    'MobileNetV1': [8, 16, 32],\r\n    'ResNet50': [32, 16]\r\n};\r\nvar VALID_MULTIPLIER = {\r\n    'MobileNetV1': [0.50, 0.75, 1.0],\r\n    'ResNet50': [1.0]\r\n};\r\nvar VALID_QUANT_BYTES = [1, 2, 4];\r\nfunction validateModelConfig(config) {\r\n    config = config || MOBILENET_V1_CONFIG;\r\n    if (config.architecture == null) {\r\n        config.architecture = 'MobileNetV1';\r\n    }\r\n    if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\r\n        throw new Error(\"Invalid architecture \" + config.architecture + \". \" +\r\n            (\"Should be one of \" + VALID_ARCHITECTURE));\r\n    }\r\n    if (config.outputStride == null) {\r\n        config.outputStride = 16;\r\n    }\r\n    if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\r\n        throw new Error(\"Invalid outputStride \" + config.outputStride + \". \" +\r\n            (\"Should be one of \" + VALID_STRIDE[config.architecture] + \" \") +\r\n            (\"for architecture \" + config.architecture + \".\"));\r\n    }\r\n    if (config.multiplier == null) {\r\n        config.multiplier = 1.0;\r\n    }\r\n    if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\r\n        throw new Error(\"Invalid multiplier \" + config.multiplier + \". \" +\r\n            (\"Should be one of \" + VALID_MULTIPLIER[config.architecture] + \" \") +\r\n            (\"for architecture \" + config.architecture + \".\"));\r\n    }\r\n    if (config.quantBytes == null) {\r\n        config.quantBytes = 4;\r\n    }\r\n    if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\r\n        throw new Error(\"Invalid quantBytes \" + config.quantBytes + \". \" +\r\n            (\"Should be one of \" + VALID_QUANT_BYTES + \" \") +\r\n            (\"for architecture \" + config.architecture + \".\"));\r\n    }\r\n    return config;\r\n}\r\nexports.PERSON_INFERENCE_CONFIG = {\r\n    flipHorizontal: false,\r\n    internalResolution: 'medium',\r\n    segmentationThreshold: 0.7,\r\n    maxDetections: 10,\r\n    scoreThreshold: 0.4,\r\n    nmsRadius: 20\r\n};\r\nexports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG = {\r\n    flipHorizontal: false,\r\n    internalResolution: 'medium',\r\n    segmentationThreshold: 0.7,\r\n    maxDetections: 10,\r\n    scoreThreshold: 0.4,\r\n    nmsRadius: 20,\r\n    minKeypointScore: 0.3,\r\n    refineSteps: 10\r\n};\r\nfunction validatePersonInferenceConfig(config) {\r\n    var segmentationThreshold = config.segmentationThreshold, maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius;\r\n    if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\r\n        throw new Error(\"segmentationThreshold \" + segmentationThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (maxDetections <= 0) {\r\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\r\n            \"Should be > 0\");\r\n    }\r\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (nmsRadius <= 0) {\r\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\r\n    }\r\n}\r\nfunction validateMultiPersonInstanceInferenceConfig(config) {\r\n    var segmentationThreshold = config.segmentationThreshold, maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius, minKeypointScore = config.minKeypointScore, refineSteps = config.refineSteps;\r\n    if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\r\n        throw new Error(\"segmentationThreshold \" + segmentationThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (maxDetections <= 0) {\r\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\r\n            \"Should be > 0\");\r\n    }\r\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (nmsRadius <= 0) {\r\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\r\n    }\r\n    if (minKeypointScore < 0 || minKeypointScore > 1) {\r\n        throw new Error(\"Invalid minKeypointScore \" + minKeypointScore + \".\" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (refineSteps <= 0 || refineSteps > 20) {\r\n        throw new Error(\"Invalid refineSteps \" + refineSteps + \".\" +\r\n            \"Should be in range [1, 20]\");\r\n    }\r\n}\r\nvar BodyPix = /** @class */ (function () {\r\n    function BodyPix(net) {\r\n        this.baseModel = net;\r\n    }\r\n    BodyPix.prototype.predictForPersonSegmentation = function (input) {\r\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n        return {\r\n            segmentLogits: segmentation,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd\r\n        };\r\n    };\r\n    BodyPix.prototype.predictForPersonSegmentationAndPart = function (input) {\r\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, partHeatmaps = _a.partHeatmaps, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n        return {\r\n            segmentLogits: segmentation,\r\n            partHeatmapLogits: partHeatmaps,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd\r\n        };\r\n    };\r\n    BodyPix.prototype.predictForMultiPersonInstanceSegmentationAndPart = function (input) {\r\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, partHeatmaps = _a.partHeatmaps;\r\n        return {\r\n            segmentLogits: segmentation,\r\n            longOffsets: longOffsets,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd,\r\n            partHeatmaps: partHeatmaps\r\n        };\r\n    };\r\n    /**\r\n     * Given an image with people, returns a dictionary of all intermediate\r\n     * tensors including: 1) a binary array with 1 for the pixels that are part of\r\n     * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param internalResolution Defaults to 'medium'. The internal resolution\r\n     * that the input is resized to before inference. The larger the\r\n     * internalResolution the more accurate the model at the cost of slower\r\n     * prediction times. Available values are 'low', 'medium', 'high', 'full', or\r\n     * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n     * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n     *\r\n     * @param segmentationThreshold The minimum that segmentation values must have\r\n     * to be considered part of the person. Affects the generation of the\r\n     * segmentation mask.\r\n     *\r\n     * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\r\n     * and `padding`:\r\n     * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\r\n     * person, and 0 otherwise. The width and height correspond to the same\r\n     * dimensions of the input image.\r\n     * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\r\n     * pose estimation decoding.\r\n     * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\r\n     * estimation decoding.\r\n     * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\r\n     * by pose estimation decoding.\r\n     * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\r\n     * by pose estimation decoding.\r\n     * - `padding`: The padding (unit pixels) being applied to the input image\r\n     * before it is fed into the model.\r\n     */\r\n    BodyPix.prototype.segmentPersonActivation = function (input, internalResolution, segmentationThreshold) {\r\n        var _this = this;\r\n        if (segmentationThreshold === void 0) { segmentationThreshold = 0.5; }\r\n        var _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n        var internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\r\n        var _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n        var _c = tf.tidy(function () {\r\n            var _a = _this.predictForPersonSegmentation(resized), segmentLogits = _a.segmentLogits, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n            var _b = resized.shape, resizedHeight = _b[0], resizedWidth = _b[1];\r\n            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n            return {\r\n                segmentation: decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold),\r\n                heatmapScores: heatmapScores,\r\n                offsets: offsets,\r\n                displacementFwd: displacementFwd,\r\n                displacementBwd: displacementBwd\r\n            };\r\n        }), segmentation = _c.segmentation, heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n        resized.dispose();\r\n        return {\r\n            segmentation: segmentation,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd,\r\n            padding: padding,\r\n            internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\r\n        };\r\n    };\r\n    /**\r\n     * Given an image with many people, returns a PersonSegmentation dictionary\r\n     * that contains the segmentation mask for all people and a single pose.\r\n     *\r\n     * Note: The segmentation mask returned by this method covers all people but\r\n     * the pose works well for one person. If you want to estimate instance-level\r\n     * multiple person segmentation & pose for each person, use\r\n     * `segmentMultiPerson` instead.\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param config PersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using person decoding.\r\n     *\r\n     * @return A SemanticPersonSegmentation dictionary that contains height,\r\n     * width, the flattened binary segmentation mask and the poses for all people.\r\n     * The width and height correspond to the same dimensions of the input image.\r\n     * - `height`: The height of the segmentation data in pixel unit.\r\n     * - `width`: The width of the segmentation data in pixel unit.\r\n     * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\r\n     * belongs to a person and 0 means the pixel doesn't belong to a person. The\r\n     * size of the array is equal to `height` x `width` in row-major order.\r\n     * - `allPoses`: The 2d poses of all people.\r\n     */\r\n    BodyPix.prototype.segmentPerson = function (input, config) {\r\n        if (config === void 0) { config = exports.PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, segmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, result, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.PERSON_INFERENCE_CONFIG), config);\r\n                        validatePersonInferenceConfig(config);\r\n                        _a = this.segmentPersonActivation(input, config.internalResolution, config.segmentationThreshold), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\r\n                        _b = segmentation.shape, height = _b[0], width = _b[1];\r\n                        return [4 /*yield*/, segmentation.data()];\r\n                    case 1:\r\n                        result = _c.sent();\r\n                        segmentation.dispose();\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\r\n                    case 2:\r\n                        tensorBuffers = _c.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        return [2 /*return*/, { height: height, width: width, data: result, allPoses: poses }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an image with multiple people, returns an *array* of\r\n     * PersonSegmentation object. Each element in the array corresponding to one\r\n     * of the people in the input image. In other words, it predicts\r\n     * instance-level multiple person segmentation & pose for each person.\r\n     *\r\n     * The model does standard ImageNet pre-processing before inferring through\r\n     * the model. The image pixels should have values [0-255].\r\n     *\r\n     * @param input\r\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\r\n     * image to feed through the network.\r\n     *\r\n     * @param config MultiPersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using multi-person decoding.\r\n     *\r\n     * @return An array of PersonSegmentation object, each containing a width,\r\n     * height, a binary array (1 for the pixels that are part of the\r\n     * person, and 0 otherwise) and 2D pose. The array size corresponds to the\r\n     * number of pixels in the image. The width and height correspond to the\r\n     * dimensions of the image the binary array is shaped to, which are the same\r\n     * dimensions of the input image.\r\n     */\r\n    BodyPix.prototype.segmentMultiPerson = function (input, config) {\r\n        if (config === void 0) { config = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\r\n            var _this = this;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG), config);\r\n                        validateMultiPersonInstanceInferenceConfig(config);\r\n                        _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n                        internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\r\n                        _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n                        _c = tf.tidy(function () {\r\n                            var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n                            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            var longOffsetsResized = false;\r\n                            var scaledLongOffsets;\r\n                            if (longOffsetsResized) {\r\n                                scaledLongOffsets = util_1.scaleAndCropToInputTensorShape(longOffsets, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            }\r\n                            else {\r\n                                scaledLongOffsets = longOffsets;\r\n                            }\r\n                            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\r\n                            return {\r\n                                segmentation: segmentation,\r\n                                longOffsets: scaledLongOffsets,\r\n                                heatmapScoresRaw: heatmapScores,\r\n                                offsetsRaw: offsets,\r\n                                displacementFwdRaw: displacementFwd,\r\n                                displacementBwdRaw: displacementBwd\r\n                            };\r\n                        }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw;\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\r\n                    case 1:\r\n                        tensorBuffers = _d.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        return [4 /*yield*/, decode_instance_masks_1.decodePersonInstanceMasks(segmentation, longOffsets, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\r\n                    case 2:\r\n                        instanceMasks = _d.sent();\r\n                        resized.dispose();\r\n                        segmentation.dispose();\r\n                        longOffsets.dispose();\r\n                        heatmapScoresRaw.dispose();\r\n                        offsetsRaw.dispose();\r\n                        displacementFwdRaw.dispose();\r\n                        displacementBwdRaw.dispose();\r\n                        return [2 /*return*/, instanceMasks];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an image with many people, returns a dictionary containing: height,\r\n     * width, a tensor with a part id from 0-24 for the pixels that are\r\n     * part of a corresponding body part, and -1 otherwise. This does standard\r\n     * ImageNet pre-processing before inferring through the model.  The image\r\n     * should pixels should have values [0-255].\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param internalResolution Defaults to 'medium'. The internal resolution\r\n     * percentage that the input is resized to before inference. The larger the\r\n     * internalResolution the more accurate the model at the cost of slower\r\n     * prediction times. Available values are 'low', 'medium', 'high', 'full', or\r\n     * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n     * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n     *\r\n     * @param segmentationThreshold The minimum that segmentation values must have\r\n     * to be considered part of the person.  Affects the clipping of the colored\r\n     * part image.\r\n     *\r\n     * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\r\n     * `offsets`, and `padding`:\r\n     * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\r\n     * the pixels that are part of a corresponding body part, and -1 otherwise.\r\n     * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\r\n     * single-person pose estimation decoding.\r\n     * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\r\n     * estimation decoding.\r\n     * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\r\n     * used by pose estimation decoding.\r\n     * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\r\n     * by pose estimation decoding.\r\n     * - `padding`: The padding (unit pixels) being applied to the input image\r\n     * before it is fed into the model.\r\n     */\r\n    BodyPix.prototype.segmentPersonPartsActivation = function (input, internalResolution, segmentationThreshold) {\r\n        var _this = this;\r\n        if (segmentationThreshold === void 0) { segmentationThreshold = 0.5; }\r\n        var _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n        var internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\r\n        var _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n        var _c = tf.tidy(function () {\r\n            var _a = _this.predictForPersonSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, partHeatmapLogits = _a.partHeatmapLogits, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\r\n            var _b = resized.shape, resizedHeight = _b[0], resizedWidth = _b[1];\r\n            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n            var scaledPartHeatmapScore = util_1.scaleAndCropToInputTensorShape(partHeatmapLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold);\r\n            return {\r\n                partSegmentation: decode_part_map_1.decodePartSegmentation(segmentation, scaledPartHeatmapScore),\r\n                heatmapScores: heatmapScores,\r\n                offsets: offsets,\r\n                displacementFwd: displacementFwd,\r\n                displacementBwd: displacementBwd\r\n            };\r\n        }), partSegmentation = _c.partSegmentation, heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n        resized.dispose();\r\n        return {\r\n            partSegmentation: partSegmentation,\r\n            heatmapScores: heatmapScores,\r\n            offsets: offsets,\r\n            displacementFwd: displacementFwd,\r\n            displacementBwd: displacementBwd,\r\n            padding: padding,\r\n            internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\r\n        };\r\n    };\r\n    /**\r\n     * Given an image with many people, returns a PartSegmentation dictionary that\r\n     * contains the body part segmentation mask for all people and a single pose.\r\n     *\r\n     * Note: The body part segmentation mask returned by this method covers all\r\n     * people but the pose works well when there is one person. If you want to\r\n     * estimate instance-level multiple person body part segmentation & pose for\r\n     * each person, use `segmentMultiPersonParts` instead.\r\n     *\r\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n     * The input image to feed through the network.\r\n     *\r\n     * @param config PersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using single person decoding.\r\n     *\r\n     * @return A SemanticPartSegmentation dictionary that contains height, width,\r\n     * the flattened binary segmentation mask and the pose for the person. The\r\n     * width and height correspond to the same dimensions of the input image.\r\n     * - `height`: The height of the person part segmentation data in pixel unit.\r\n     * - `width`: The width of the person part segmentation data in pixel unit.\r\n     * - `data`: The flattened Int32Array of person part segmentation data with a\r\n     * part id from 0-24 for the pixels that are part of a corresponding body\r\n     * part, and -1 otherwise. The size of the array is equal to `height` x\r\n     * `width` in row-major order.\r\n     * - `allPoses`: The 2d poses of all people.\r\n     */\r\n    BodyPix.prototype.segmentPersonParts = function (input, config) {\r\n        if (config === void 0) { config = exports.PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, partSegmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, data, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.PERSON_INFERENCE_CONFIG), config);\r\n                        validatePersonInferenceConfig(config);\r\n                        _a = this.segmentPersonPartsActivation(input, config.internalResolution, config.segmentationThreshold), partSegmentation = _a.partSegmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\r\n                        _b = partSegmentation.shape, height = _b[0], width = _b[1];\r\n                        return [4 /*yield*/, partSegmentation.data()];\r\n                    case 1:\r\n                        data = _c.sent();\r\n                        partSegmentation.dispose();\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\r\n                    case 2:\r\n                        tensorBuffers = _c.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        return [2 /*return*/, { height: height, width: width, data: data, allPoses: poses }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an image with multiple people, returns an *array* of PartSegmentation\r\n     * object. Each element in the array corresponding to one\r\n     * of the people in the input image. In other words, it predicts\r\n     * instance-level multiple person body part segmentation & pose for each\r\n     * person.\r\n     *\r\n     * This does standard ImageNet pre-processing before inferring through\r\n     * the model. The image pixels should have values [0-255].\r\n     *\r\n     * @param input\r\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\r\n     * image to feed through the network.\r\n     *\r\n     * @param config MultiPersonInferenceConfig object that contains\r\n     * parameters for the BodyPix inference using multi-person decoding.\r\n     *\r\n     * @return An array of PartSegmentation object, each containing a width,\r\n     * height, a flattened array (with part id from 0-24 for the pixels that are\r\n     * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\r\n     * and height correspond to the dimensions of the image. Each flattened part\r\n     * segmentation array size is equal to `height` x `width`.\r\n     */\r\n    BodyPix.prototype.segmentMultiPersonParts = function (input, config) {\r\n        if (config === void 0) { config = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, partSegmentation, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\r\n            var _this = this;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        config = __assign(__assign({}, exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG), config);\r\n                        validateMultiPersonInstanceInferenceConfig(config);\r\n                        _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\r\n                        internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\r\n                        _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\r\n                        _c = tf.tidy(function () {\r\n                            var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, partHeatmaps = _a.partHeatmaps;\r\n                            // decoding with scaling.\r\n                            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            // decoding with scaling.\r\n                            var scaledPartSegmentationScores = util_1.scaleAndCropToInputTensorShape(partHeatmaps, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\r\n                            var scaledLongOffsets = longOffsets;\r\n                            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\r\n                            var partSegmentation = decode_part_map_1.decodeOnlyPartSegmentation(scaledPartSegmentationScores);\r\n                            return {\r\n                                segmentation: segmentation,\r\n                                longOffsets: scaledLongOffsets,\r\n                                heatmapScoresRaw: heatmapScores,\r\n                                offsetsRaw: offsets,\r\n                                displacementFwdRaw: displacementFwd,\r\n                                displacementBwdRaw: displacementBwd,\r\n                                partSegmentation: partSegmentation\r\n                            };\r\n                        }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw, partSegmentation = _c.partSegmentation;\r\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\r\n                    case 1:\r\n                        tensorBuffers = _d.sent();\r\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\r\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\r\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\r\n                        return [4 /*yield*/, decode_instance_masks_1.decodePersonInstancePartMasks(segmentation, longOffsets, partSegmentation, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\r\n                    case 2:\r\n                        instanceMasks = _d.sent();\r\n                        resized.dispose();\r\n                        segmentation.dispose();\r\n                        longOffsets.dispose();\r\n                        heatmapScoresRaw.dispose();\r\n                        offsetsRaw.dispose();\r\n                        displacementFwdRaw.dispose();\r\n                        displacementBwdRaw.dispose();\r\n                        partSegmentation.dispose();\r\n                        return [2 /*return*/, instanceMasks];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    BodyPix.prototype.dispose = function () {\r\n        this.baseModel.dispose();\r\n    };\r\n    return BodyPix;\r\n}());\r\nexports.BodyPix = BodyPix;\r\n/**\r\n * Loads the MobileNet BodyPix model.\r\n */\r\nfunction loadMobileNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, multiplier, url, graphModel, mobilenet;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    multiplier = config.multiplier;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = saved_models_1.mobileNetSavedModel(outputStride, multiplier, quantBytes);\r\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    mobilenet = new mobilenet_1.MobileNet(graphModel, outputStride);\r\n                    return [2 /*return*/, new BodyPix(mobilenet)];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Loads the ResNet BodyPix model.\r\n */\r\nfunction loadResNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, url, graphModel, resnet;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = saved_models_1.resNet50SavedModel(outputStride, quantBytes);\r\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    resnet = new resnet_1.ResNet(graphModel, outputStride);\r\n                    return [2 /*return*/, new BodyPix(resnet)];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\r\n * or MobileNet architecture. The model to be loaded is configurable using the\r\n * config dictionary ModelConfig. Please find more details in the\r\n * documentation of the ModelConfig.\r\n *\r\n * @param config ModelConfig dictionary that contains parameters for\r\n * the BodyPix loading process. Please find more details of each parameters\r\n * in the documentation of the ModelConfig interface. The predefined\r\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\r\n * for defining your customized config.\r\n */\r\nfunction load(config) {\r\n    if (config === void 0) { config = MOBILENET_V1_CONFIG; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            config = validateModelConfig(config);\r\n            if (config.architecture === 'ResNet50') {\r\n                return [2 /*return*/, loadResNet(config)];\r\n            }\r\n            else if (config.architecture === 'MobileNetV1') {\r\n                return [2 /*return*/, loadMobileNet(config)];\r\n            }\r\n            else {\r\n                return [2 /*return*/, null];\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nexports.load = load;\r\n"},"lineCount":725}},"error":null,"hash":"7447fd80cf5f0ebff37caf5de4e71ce1","cacheData":{"env":{}}}